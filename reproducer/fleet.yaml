# The default namespace to be applied to resources. This field is not used to
# enforce or lock down the deployment to a specific namespace, but instead
# provide the default value of the namespace field if one is not specified in
# the manifests.
#
# Default: default
defaultNamespace: default

helm:

  # These options control how "fleet apply" downloads the chart
  #
  # Use a custom location for the Helm chart. This can refer to any go-getter
  # URL or OCI registry based helm chart URL e.g.
  # "oci://ghcr.io/fleetrepoci/guestbook".  This allows one to download charts
  # from most any location.  Also know that go-getter URL supports adding a
  # digest to validate the download. If repo is set below this field is the name
  # of the chart to lookup.
  #
  # It is possible to download the chart from a Git repository, e.g.  by using
  # `git@github.com:rancher/fleet-examples//single-cluster/helm`. If a secret
  # for the SSH key was defined in the GitRepo via `helmSecretName`, it will be
  # injected into the chart URL.
  #
  # Git repositories can be downloaded via unauthenticated http, by using for
  # example:
  #
  # `git::http://github.com/rancher/fleet-examples/single-cluster/helm`.
  # chart: .
  chart: ""


  ### These options only work for helm-type bundles.
  #
  # Any values that should be placed in the `values.yaml` and passed to helm
  # during install.
  values:

    # All labels on Rancher clusters are available using
    # global.fleet.clusterLabels.LABELNAME These can now be accessed directly as
    # variables The variable's value will be an empty string if the referenced
    # cluster label does not exist on the targeted cluster.
    # variableName: global.fleet.clusterLabels.LABELNAME

    # See Templating notes below for more information on templating.
    templatedLabel: "${ .ClusterName }-foo"


  ### These options control how fleet-agent deploys the bundle, they also apply
  ### for kustomize- and manifest-style bundles.
  #
  # A custom release name to deploy the chart as. If not specified a release name
  # will be generated by combining the invoking GitRepo.name + GitRepo.path.
  releaseName: reproducer

# # Target customization are used to determine how resources should be modified
# # per target Targets are evaluated in order and the first one to match a cluster
# # is used for that cluster.
# targetCustomizations:

#   # The name of target. If not specified a default name of the format
#   # "target000" will be used. This value is mostly for display
#   - name: testing

#     # A selector used to match clusters.  The structure is the standard
#     # metav1.LabelSelector format. If clusterGroupSelector or clusterGroup is
#     # specified, clusterSelector will be used only to further refine the
#     # selection after clusterGroupSelector and clusterGroup is evaluated.
#     clusterSelector:
#       matchLabels:
#         env: test
